openapi: 3.0.0
info:
  description: |

    # Introduction
    This API is documented in **OpenAPI format**. In addition to standard
    OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).

    # Authentication

    SigNoz offers below forms of authentication:
      - API Key

    <SecurityDefinitions />

  version: 0.0.0
  title: SigNoz API
  termsOfService: 'https://signoz.io/terms-of-service/'
  contact:
    name: API Support
    email: dev@signoz.io
    url: https://signoz.io
tags:
  - name: alerts
    description: Alerts API
  - name: dashboards
    description: Access to dashboards
  - name: alerts_model
    x-displayName: The Alerts Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Alert" />
  - name: dashboards_model
    x-displayName: The Dashboards Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Dashboard" />
x-tagGroups:
  - name: General
    tags:
      - alerts
      - dashboards
  - name: Models
    tags:
      - alerts_model
      - dashboards_model
paths:
  '/api/v1/rules':
    post:
      tags:
        - alerts
      summary: Add a alert rule to the system
      description: Add a alert rule to the system
      operationId: createRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Alert'
    get:
      tags:
        - alerts
      summary: Get all alert rules
      description: ''
      operationId: getRules
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
  '/api/v1/rules/{id}':
    get:
      tags:
        - alerts
      summary: Find alert rule by ID
      description: Returns a single alert rule
      operationId: getRuleById
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: ID of alert rule to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '400':
          description: Invalid ID supplied
        '404':
          description: Alert not found
    put:
      tags:
        - alerts
      summary: Update an existing alert rule
      description: ''
      operationId: updateRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

        - name: id
          in: path
          description: ID of alert rule to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Alert'
    delete:
      tags:
        - alerts
      summary: Deletes a alert rule
      description: ''
      operationId: deleteRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: Alert rule id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
  '/api/v1/dashboards':
    post:
      tags:
        - dashboards
      summary: Add a dashboard to the system
      description: Add a dashboard to the system
      operationId: createDashboard
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Dashboard'
    get:
      tags:
        - dashboards
      summary: Get all dashboards
      description: ''
      operationId: getDashboards
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
  '/api/v1/dashboards/{uuid}':
    get:
      tags:
        - dashboards
      summary: Find dashboard by UUID
      description: Returns a single dashboard
      operationId: getDashboardByUUID
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: ID of dashboard to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Invalid ID supplied
        '404':
          description: Dashboard not found
    put:
      tags:
        - dashboards
      summary: Update an existing dashboard
      description: ''
      operationId: updateDashboard
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

        - name: id
          in: path
          description: ID of dashboard to update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Dashboard'
    delete:
      tags:
        - dashboards
      summary: Deletes a alert rule
      description: ''
      operationId: deleteRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: Alert rule id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    PromQL:
      type: object
      description: PromQL for the widget
      required:
        - query
        - name
        - disabled
      properties:
        disabled:
          type: boolean
          description: Whether the PromQL query is disabled or not
        name:
          type: string
          description: Name for the query (alphabet letter used in the UI, e.g. A, B, C, etc.)
        query:
          type: string
          description: PromQL query expression
        legend:
          type: string
          description: Legend for the query
    BuilderQueryDashboard:
      type: object
      description: Builder query for the widget
      properties:
        queryData:
          type: object
          description: Query data for the widget. Populate with non-formula queries.
          $ref: '#/components/schemas/BuilderQuery'
        queryFormulas:
          type: object
          description: Query formulas for the widget. Populate with formula queries.
          $ref: '#/components/schemas/BuilderQuery'
    ClickhouseSQL:
      type: object
      description: Clickhouse SQL for the widget
      required:
        - query
        - name
        - disabled
      properties:
        disabled:
          type: boolean
          description: Whether the Clickhouse SQL is disabled or not
        name:
          type: string
          description: Name for the query (alphabet letter used in the UI, e.g. A, B, C, etc.)
        query:
          type: string
          description: Clickhouse SQL query for the widget
        legend:
          type: string
          description: Legend for the query
    Widget:
      type: object
      description: Widget for the dashboard
      required:
        - id
        - panelTypes
        - title
        - query
      properties:
        id:
          type: string
          description: ID for the widget
        description:
          type: string
          description: Description for the widget
        isStacked:
          type: boolean
          description: Whether the widget is stacked or not
        nullZeroValues:
          type: boolean
          description: Whether the widget has null zero values or not
        opacity:
          type: integer
          description: Opacity for the widget
        panelTypes:
          type: string
          description: Panel type for the widget. (graph - time series chart, table - table, value - single value, list - list of values, trace - trace view)
          enum:
            - 'graph'
            - 'table'
            - 'value'
            - 'list'
            - 'trace'
        timePreferance:
          type: string
          description: Time preferance for the widget
          enum:
            - 'GLOBAL_TIME'
        title:
          type: string
          description: Title for the widget
        yAxisUnit:
          type: string
          description: Y axis unit for the widget
        query:
          type: object
          description: Query for the widget. The query type can be builder, clickhouse_sql or promql
          required:
            - queryType
          properties:
            queryType:
              type: string
              description: Query type for the widget
              enum:
                - 'builder'
                - 'clickhouse_sql'
                - 'promql'
            promql:
              type: array
              description: PromQL for the widget
              items:
                $ref: '#/components/schemas/PromQL'
            clickhouse_sql:
              type: array
              description: Clickhouse SQL for the widget
              items:
                $ref: '#/components/schemas/ClickhouseSQL'
            builder:
              type: object
              description: Builder query for the widget
              $ref: '#/components/schemas/BuilderQueryDashboard'
    Dashboard:
      type: object
      required:
        - title
        - layout
        - widgets
      properties:
        title:
          type: string
          description: Title of the dashboard
        description:
          type: string
          description: Description of the dashboard
        tags:
          type: array
          description: Tags for the dashboard
          items:
            type: string
        layout:
          type: array
          description: Layout for the dashboard
          items:
            type: object
            properties:
              x:
                type: integer
                description: X coordinate for the layout
              y:
                type: integer
                description: Y coordinate for the layout
              w:
                type: integer
                description: Width for the layout
              h:
                type: integer
                description: Height for the layout
              i:
                type: string
                description: ID for the layout
              moved:
                type: boolean
                description: Whether the layout is moved or not
              static:
                type: boolean
                description: Whether the layout is static or not
        variables:
          type: object
          description: Variables for the dashboard
          properties:
            key:
              type: object
              description: Key for the variable
              properties:
                id:
                  type: string
                  description: ID for the variable
                name:
                  type: string
                  description: Name for the variable
                description:
                  type: string
                  description: Description for the variable
                key:
                  type: string
                  description: Key for the variable, use same as name
                type:
                  type: string
                  description: Type for the variable
                  enum:
                    - 'QUERY'
                    - 'CONSTANT'
                queryValue:
                  type: string
                  description: Query for the variable
                allSelected:
                  type: boolean
                  description: Whether all the values are selected or not
                customValue:
                  type: string
                  description: Custom value for the variable
                multiSelect:
                  type: boolean
                  description: Whether the variable is multi select or not
                order:
                  type: integer
                  description: Order for the variable
                showALLOption:
                  type: boolean
                  description: Whether to show all option or not
                sort:
                  type: string
                  description: Sort for the variable
                  enum:
                    - 'ASC'
                    - 'DESC'
                textboxValue:
                  type: string
                  description: Textbox value for the variable
        widgets:
          type: array
          description: Widgets for the dashboard
          items:
            $ref: '#/components/schemas/Widget'
      xml:
        name: Dashboard
    DataSource:
      type: string
      enum:
        - metrics
        - logs
        - traces
    AggregateOperator:
      type: string
      enum:
        - 'count'
        - 'count_distinct'
        - 'sum'
        - 'avg'
        - 'min'
        - 'max'
        - 'p05'
        - 'p10'
        - 'p20'
        - 'p25'
        - 'p50'
        - 'p75'
        - 'p90'
        - 'p95'
        - 'p99'
        - 'rate'
        - 'sum_rate'
        - 'avg_rate'
        - 'min_rate'
        - 'max_rate'
        - 'rate_sum'
        - 'rate_avg'
        - 'rate_min'
        - 'rate_max'
        - 'hist_quantile_50'
        - 'hist_quantile_75'
        - 'hist_quantile_90'
        - 'hist_quantile_95'
        - 'hist_quantile_99'
    Attribute:
      type: object
      properties:
        key:
          type: string
          description: Key for the attribute
        type:
          type: string
          description: Type of the attribute. Can be tag, resource or empty. `tag` for event level attributes, `resource` for resource level attributes.
          enum:
            - 'tag'
            - 'resource'
            - ''
        dataType:
          type: string
          description: Data type of the attribute. It nothing specified, string type will be assumed.
          enum:
            - 'string'
            - 'int64'
            - 'float64'
            - 'bool'
            - 'array(string)'
            - 'array(int64)'
            - 'array(float64)'
            - 'array(bool)'
        isColumn:
          type: boolean
          description: Whether the attribute is a materialized column or not. Helps in faster querying.
        isJSON:
          type: boolean
          description: Whether the attribute is a JSON or not. Applicable to logs only. When working with nested JSON, set this to true.
    Filter:
      type: object
      description: Filter for the query
      properties:
        key:
          type: object
          description: Key for the filter
          $ref: '#/components/schemas/Attribute'
        value:
          type: any
          description: Value for the filter. This can be single value or an array of values. For `in` and `nin` operators, this should be an array of values.
        op:
          type: string
          description: Operator for the filter
          enum:
            - '='
            - '!='
            - '>'
            - '>='
            - '<'
            - '<='
            - 'in'
            - 'nin'
            - 'like'
            - 'nlike'
            - 'contains'
            - 'ncontains'
            - 'regex'
            - 'nregex'
            - 'exists'
            - 'nexists'
            - 'has'
            - 'nhas'
    FilterSet:
      type: object
      description: Filter set for the query
      properties:
        op:
          type: string
          description: Operation for the filter set. The items in filter set will be combined using this operation.
          enum:
            - 'and'
            - 'or'
        items:
          type: array
          description: Filters for the filter set
          items:
            allOf:
              - $ref: '#/components/schemas/Filter'
    Having:
      type: object
      description: Having for the query
      properties:
        columnName:
          type: string
          description: Column name for the having, currently aggregation column name is supported.
        op:
          type: string
          description: Operator for the having
          enum:
            - '='
            - '!='
            - '>'
            - '>='
            - '<'
            - '<='
            - 'IN'
            - 'NOT_IN'
        value:
          type: any
          description: Value for the having. This can be single value or an array of values. For `IN` and `NOT_IN` operators, this should be an array of values.
    OrderBy:
      type: object
      properties:
        columnName:
          type: string
          description: Column name for the order by
        order:
          type: string
          description: Order for the order by
          enum:
            - 'asc'
            - 'desc'
    ReduceToOperator:
      type: string
      description: Reduce to operator for the query. When the panel type is value. All the values in time range will be reduced to one value.
      enum:
        - 'sum'
        - 'avg'
        - 'min'
        - 'max'
        - 'last'
    BuilderQuery:
      type: object
      description: Builder query for the request
      required:
        - queryName
        - expression
        - stepInterval
        - dataSource
        - aggregateAttribute
        - aggregateOperator
      properties:
        queryName:
          type: string
          description: Name of the query. A, B, C, etc.
        stepInterval:
          type: int
          description: Step interval for the query i.e aggregation interval in seconds
        dataSource:
          type: string
          description: Data source for the query. Can be metrics, logs or traces.
          oneOf:
            - $ref: '#/components/schemas/DataSource'
        aggregateOperator:
          type: string
          description: Aggregate operator for the query.
          allOf:
            - $ref: '#/components/schemas/AggregateOperator'
        aggregateAttribute:
          type: object
          description: Aggregate attribute for the query. For metrics, key is the metric name. For logs, key is the attribute name. For traces, key is the span attribute name.
          allOf:
            - $ref: '#/components/schemas/Attribute'
        filters:
          type: object
          description: Filters for the query
          allOf:
            - $ref: '#/components/schemas/FilterSet'
        groupBy:
          type: array
          description: Group by for the query
          items:
            allOf:
              - $ref: '#/components/schemas/Attribute'
        expression:
          type: string
          description: Expression for the query (same as queryName unless formula)
        disabled:
          type: boolean
          description: Whether the query is disabled or not
        having:
          type: object
          description: Having for the query
          allOf:
            - $ref: '#/components/schemas/Having'
        legend:
          type: string
          description: Legend for the query
        limit:
          type: integer
          description: Limit for the query
        offset:
          type: integer
          description: Offset for the query
        pageSize:
          type: integer
          description: Page size for the query
        orderBy:
          type: array
          description: Order by for the query
          items:
            allOf:
              - $ref: '#/components/schemas/OrderBy'
        reduceTo:
          type: string
          description: Reduce to for the query
          oneOf:
            - $ref: '#/components/schemas/ReduceToOperator'
        selectColumns:
          type: array
          description: Select columns for the query
          items:
            allOf:
              - $ref: '#/components/schemas/Attribute'
    BuilderQueryAlert:
      type: object
      description: Builder query for the alert
      properties:
        queryName:
          type: object
          description: Name of the query
          $ref: '#/components/schemas/BuilderQuery'
    CompositeQuery:
      type: object
      description: Composite query for the request
      properties:
        builderQueries:
          type: object
          description: Builder queries for the composite query
          properties:
            <queryName>:
              type: object
              description: Name of the query
              $ref: '#/components/schemas/BuilderQuery'
        chQueries:
          type: object
          description: Clickhouse SQL queries for the composite query
          properties:
            <queryName>:
              type: object
              description: Name of the query
              $ref: '#/components/schemas/ClickhouseSQL'
        promQueries:
          type: object
          description: PromQL queries for the composite query
          properties:
            <queryName>:
              type: object
              description: Name of the query
              $ref: '#/components/schemas/PromQL'
        panelType:
          type: string
          description: Panel type for the composite query. Only graph is supported.
          enum:
            - 'graph'
        queryType:
          type: string
          description: Query type for the composite query
          enum:
            - 'builder'
            - 'clickhouse_sql'
            - 'promql'
    AlertType:
      type: string
      enum:
        - LOGS_BASED_ALERT
        - METRIC_BASED_ALERT
        - TRACES_BASED_ALERT
        - EXCEPTIONS_BASED_ALERT
    RuleType:
      type: string
      description: Use "promql_rule" for promql based alert otherwise use "threshold_rule"
      enum:
        - threshold_rule
        - promql_rule
    MatchType:
      type: string
      description: Type of the match ("1" - At least once, "2" - All the times, "3" - On average, "4" - In total)
      enum:
        - '0'
        - '1'
        - '2'
        - '3'
        - '4'
    CompareOpType:
      type: string
      description: Type of the comparision operation ("1" - Value is above, "2" - Value is below, "3" - Equal to, "4" - Not equal to)
      enum:
        - '0'
        - '1'
        - '2'
        - '3'
        - '4'
    Condition:
      type: object
      required:
        - target
        - matchType
        - op
        - compositeQuery
      properties:
        target:
          description: Target value for the condition.
          type: float
        matchType:
          description: Type of the match
          oneOf:
            - $ref: '#/components/schemas/MatchType'
        op:
          description: Type of the comparison operation
          oneOf:
            - $ref: '#/components/schemas/CompareOpType'
        compositeQuery:
          description: Composite query for the condition
          allOf:
            - $ref: '#/components/schemas/CompositeQuery'
        targetUnit:
          description: Unit of the target
          type: string
        selectedQueryName:
          description: Name of the selected query
          type: string
    Alert:
      type: object
      required:
        - alert
        - alertType
        - ruleType
        - condition
      properties:
        alert:
          description: Name of the alert
          type: string
        alertType:
          description: Type of the alert
          oneOf:
            - $ref: '#/components/schemas/AlertType'
        description:
          description: Description of the alert
          type: string
        ruleType:
          description: Type of the rule
          oneOf:
            - $ref: '#/components/schemas/RuleType'
        evalWindow:
          description: Evaluation time window (ex - (now-15m, now)) for the alert in parseable format ("15m", "30m" "1h" etc.). Default is 5m.
          type: string
        frequency:
          description: Run frequency of the alert in parseable format ("15m", "30m" "1h" etc.). Default is 1m.
          type: string
        condition:
          description: Condition criteria for the alert.
          allOf:
            - $ref: '#/components/schemas/Condition'
        labels:
          description: Labels kv map for the alert
          type: object
          properties:
            key:
              type: string
              description: Key for the label
        annotations:
          description: Annotations kv map for the alert
          type: object
          properties:
            key:
              type: string
              description: Key for the annotation
        disabled:
          description: Whether the alert is disabled or not
          type: boolean
        source:
          description: Source of the alert where it is created from.
          type: string
        preferredChannels:
          description: Preferred channels for the alert. If not specified, all the channels will be used. Use the alert channel for this.
          type: array
          items:
            type: string
      xml:
        name: Alert
  requestBodies:
    Alert:
      content:
        application/json:
          schema:
            allOf:
              - description: Alert object that needs to be added to the system
                title: Alert
              - $ref: '#/components/schemas/Alert'
      description: Alert object that needs to be added to the system
      required: true
    Dashboard:
      content:
        application/json:
          schema:
            allOf:
              - description: Dashboard object that needs to be added to the system
                title: Dashboard
              - $ref: '#/components/schemas/Dashboard'
      description: Dashboard object that needs to be added to the system
      required: true
  securitySchemes:
    api_key:
      description: >
        For this API docs, you can use the api key `SIGNOZ-API-KEY` to access data.
      type: apiKey
      name: SIGNOZ-API-KEY
      in: header
  examples:
    Order:
      value:
        quantity: 1
        shipDate: '2018-10-19T16:46:45Z'
        status: placed
        complete: false
