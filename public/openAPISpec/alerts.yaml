openapi: 3.0.0
info:
  description: |

    # Introduction
    This API is documented in **OpenAPI format**. In addition to standard
    OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).

    # Authentication

    SigNoz offers below forms of authentication:
      - API Key

    <SecurityDefinitions />

  version: 0.0.0
  title: SigNoz API
  termsOfService: 'https://signoz.io/terms-of-service/'
  contact:
    name: API Support
    email: dev@signoz.io
    url: https://signoz.io
tags:
  - name: alerts
    description: Alerts API
  - name: dashboards
    description: Access to dashboards
  - name: alerts_model
    x-displayName: The Alerts Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Alert" />
  - name: dashboards_model
    x-displayName: The Dashboards Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Dashboard" />
x-tagGroups:
  - name: General
    tags:
      - alerts
      - dashboards
  - name: Models
    tags:
      - alerts_model
      - dashboards_model
paths:
  '/api/v1/rules':
    post:
      tags:
        - alerts
      summary: Add a alert rule to the system
      description: Add a alert rule to the system
      operationId: createRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Alert'
    get:
      tags:
        - alerts
      summary: Get all alert rules
      description: ''
      operationId: getRules
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
  '/api/v1/rules/{id}':
    get:
      tags:
        - alerts
      summary: Find alert rule by ID
      description: Returns a single alert rule
      operationId: getRuleById
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: ID of alert rule to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '400':
          description: Invalid ID supplied
        '404':
          description: Alert not found
    put:
      tags:
        - alerts
      summary: Update an existing alert rule
      description: ''
      operationId: updateRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

        - name: id
          in: path
          description: ID of alert rule to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Alert'
    delete:
      tags:
        - alerts
      summary: Deletes a alert rule
      description: ''
      operationId: deleteRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: Alert rule id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
  '/api/v1/dashboards':
    post:
      tags:
        - dashboards
      summary: Add a dashboard to the system
      description: Add a dashboard to the system
      operationId: createDashboard
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Dashboard'
    get:
      tags:
        - dashboards
      summary: Get all dashboards
      description: ''
      operationId: getDashboards
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
  '/api/v1/dashboards/{uuid}':
    get:
      tags:
        - dashboards
      summary: Find dashboard by UUID
      description: Returns a single dashboard
      operationId: getDashboardByUUID
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: ID of dashboard to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Invalid ID supplied
        '404':
          description: Dashboard not found
    put:
      tags:
        - dashboards
      summary: Update an existing dashboard
      description: ''
      operationId: updateDashboard
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'

        - name: id
          in: path
          description: ID of dashboard to update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Dashboard'
    delete:
      tags:
        - dashboards
      summary: Deletes a alert rule
      description: ''
      operationId: deleteRule
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
        - name: id
          in: path
          description: Alert rule id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
  /api/v4/query_range:
    post:
      summary: Query metrics, logs, or traces over a time range
      description: |
        Provides a unified interface to query metrics, logs, and traces data with different query types.
        Supports three query types:
        * `builder` - Visual query builder for logs, traces, and metrics
        * `clickhouse_sql` - Raw SQL queries
        * `promql` - PromQL queries
      operationId: queryRange
      parameters:
        - name: SIGNOZ-API-KEY
          in: header
          required: true
          schema:
            type: string
          example: '<TOKEN>'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRangeParams'
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRangeResponse'
        '400':
          description: Bad request parameters
        '500':
          description: Internal server error

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    PromQL:
      type: object
      description: PromQL for the widget
      required:
        - query
        - name
        - disabled
      properties:
        disabled:
          type: boolean
          description: Whether the PromQL query is disabled or not
        name:
          type: string
          description: Name for the query (alphabet letter used in the UI, e.g. A, B, C, etc.)
        query:
          type: string
          description: PromQL query expression
        legend:
          type: string
          description: Legend for the query
    BuilderQueryDashboard:
      type: object
      description: Builder query for the widget
      properties:
        queryData:
          type: object
          description: Query data for the widget. Populate with non-formula queries.
          $ref: '#/components/schemas/BuilderQuery'
        queryFormulas:
          type: object
          description: Query formulas for the widget. Populate with formula queries.
          $ref: '#/components/schemas/BuilderQuery'
    ClickhouseSQL:
      type: object
      description: Clickhouse SQL for the widget
      required:
        - query
        - name
        - disabled
      properties:
        disabled:
          type: boolean
          description: Whether the Clickhouse SQL is disabled or not
        name:
          type: string
          description: Name for the query (alphabet letter used in the UI, e.g. A, B, C, etc.)
        query:
          type: string
          description: Clickhouse SQL query for the widget
        legend:
          type: string
          description: Legend for the query
    Widget:
      type: object
      description: Widget for the dashboard
      required:
        - id
        - panelTypes
        - title
        - query
      properties:
        id:
          type: string
          description: ID for the widget
        description:
          type: string
          description: Description for the widget
        isStacked:
          type: boolean
          description: Whether the widget is stacked or not
        nullZeroValues:
          type: boolean
          description: Whether the widget has null zero values or not
        opacity:
          type: integer
          description: Opacity for the widget
        panelTypes:
          type: string
          description: Panel type for the widget. (graph - time series chart, table - table, value - single value, list - list of values, trace - trace view)
          enum:
            - 'graph'
            - 'table'
            - 'value'
            - 'list'
            - 'trace'
        timePreferance:
          type: string
          description: Time preferance for the widget
          enum:
            - 'GLOBAL_TIME'
        title:
          type: string
          description: Title for the widget
        yAxisUnit:
          type: string
          description: Y axis unit for the widget
        query:
          type: object
          description: Query for the widget. The query type can be builder, clickhouse_sql or promql
          required:
            - queryType
          properties:
            queryType:
              type: string
              description: Query type for the widget
              enum:
                - 'builder'
                - 'clickhouse_sql'
                - 'promql'
            promql:
              type: array
              description: PromQL for the widget
              items:
                $ref: '#/components/schemas/PromQL'
            clickhouse_sql:
              type: array
              description: Clickhouse SQL for the widget
              items:
                $ref: '#/components/schemas/ClickhouseSQL'
            builder:
              type: object
              description: Builder query for the widget
              $ref: '#/components/schemas/BuilderQueryDashboard'
    Dashboard:
      type: object
      required:
        - title
        - layout
        - widgets
      properties:
        title:
          type: string
          description: Title of the dashboard
        description:
          type: string
          description: Description of the dashboard
        tags:
          type: array
          description: Tags for the dashboard
          items:
            type: string
        layout:
          type: array
          description: Layout for the dashboard
          items:
            type: object
            properties:
              x:
                type: integer
                description: X coordinate for the layout
              y:
                type: integer
                description: Y coordinate for the layout
              w:
                type: integer
                description: Width for the layout
              h:
                type: integer
                description: Height for the layout
              i:
                type: string
                description: ID for the layout
              moved:
                type: boolean
                description: Whether the layout is moved or not
              static:
                type: boolean
                description: Whether the layout is static or not
        variables:
          type: object
          description: Variables for the dashboard
          properties:
            key:
              type: object
              description: Key for the variable
              properties:
                id:
                  type: string
                  description: ID for the variable
                name:
                  type: string
                  description: Name for the variable
                description:
                  type: string
                  description: Description for the variable
                key:
                  type: string
                  description: Key for the variable, use same as name
                type:
                  type: string
                  description: Type for the variable
                  enum:
                    - 'QUERY'
                    - 'CONSTANT'
                queryValue:
                  type: string
                  description: Query for the variable
                allSelected:
                  type: boolean
                  description: Whether all the values are selected or not
                customValue:
                  type: string
                  description: Custom value for the variable
                multiSelect:
                  type: boolean
                  description: Whether the variable is multi select or not
                order:
                  type: integer
                  description: Order for the variable
                showALLOption:
                  type: boolean
                  description: Whether to show all option or not
                sort:
                  type: string
                  description: Sort for the variable
                  enum:
                    - 'ASC'
                    - 'DESC'
                textboxValue:
                  type: string
                  description: Textbox value for the variable
        widgets:
          type: array
          description: Widgets for the dashboard
          items:
            $ref: '#/components/schemas/Widget'
      xml:
        name: Dashboard
    DataSource:
      type: string
      enum:
        - metrics
        - logs
        - traces
    AggregateOperator:
      type: string
      enum:
        - 'count'
        - 'count_distinct'
        - 'sum'
        - 'avg'
        - 'min'
        - 'max'
        - 'p05'
        - 'p10'
        - 'p20'
        - 'p25'
        - 'p50'
        - 'p75'
        - 'p90'
        - 'p95'
        - 'p99'
        - 'rate'
        - 'sum_rate'
        - 'avg_rate'
        - 'min_rate'
        - 'max_rate'
        - 'rate_sum'
        - 'rate_avg'
        - 'rate_min'
        - 'rate_max'
        - 'hist_quantile_50'
        - 'hist_quantile_75'
        - 'hist_quantile_90'
        - 'hist_quantile_95'
        - 'hist_quantile_99'
    Attribute:
      type: object
      properties:
        key:
          type: string
          description: Key for the attribute
        type:
          type: string
          description: Type of the attribute. Can be tag, resource or empty. `tag` for event level attributes, `resource` for resource level attributes.
          enum:
            - 'tag'
            - 'resource'
            - ''
        dataType:
          type: string
          description: Data type of the attribute. It nothing specified, string type will be assumed.
          enum:
            - 'string'
            - 'int64'
            - 'float64'
            - 'bool'
            - 'array(string)'
            - 'array(int64)'
            - 'array(float64)'
            - 'array(bool)'
        isColumn:
          type: boolean
          description: Whether the attribute is a materialized column or not. Helps in faster querying.
        isJSON:
          type: boolean
          description: Whether the attribute is a JSON or not. Applicable to logs only. When working with nested JSON, set this to true.
    Filter:
      type: object
      description: Filter for the query
      properties:
        key:
          type: object
          description: Key for the filter
          $ref: '#/components/schemas/Attribute'
        value:
          type: any
          description: Value for the filter. This can be single value or an array of values. For `in` and `nin` operators, this should be an array of values.
        op:
          type: string
          description: Operator for the filter
          enum:
            - '='
            - '!='
            - '>'
            - '>='
            - '<'
            - '<='
            - 'in'
            - 'nin'
            - 'like'
            - 'nlike'
            - 'contains'
            - 'ncontains'
            - 'regex'
            - 'nregex'
            - 'exists'
            - 'nexists'
            - 'has'
            - 'nhas'
    ReduceToOperator:
      type: string
      description: Reduce to operator for the query. When the panel type is value. All the values in time range will be reduced to one value.
      enum:
        - 'sum'
        - 'avg'
        - 'min'
        - 'max'
        - 'last'
    BuilderQueryAlert:
      type: object
      description: Builder query for the alert
      properties:
        queryName:
          type: object
          description: Name of the query
          $ref: '#/components/schemas/BuilderQuery'
    AlertType:
      type: string
      enum:
        - LOGS_BASED_ALERT
        - METRIC_BASED_ALERT
        - TRACES_BASED_ALERT
        - EXCEPTIONS_BASED_ALERT
    RuleType:
      type: string
      description: Use "promql_rule" for promql based alert otherwise use "threshold_rule"
      enum:
        - threshold_rule
        - promql_rule
    MatchType:
      type: string
      description: Type of the match ("1" - At least once, "2" - All the times, "3" - On average, "4" - In total)
      enum:
        - '0'
        - '1'
        - '2'
        - '3'
        - '4'
    CompareOpType:
      type: string
      description: Type of the comparision operation ("1" - Value is above, "2" - Value is below, "3" - Equal to, "4" - Not equal to)
      enum:
        - '0'
        - '1'
        - '2'
        - '3'
        - '4'
    Condition:
      type: object
      required:
        - target
        - matchType
        - op
        - compositeQuery
      properties:
        target:
          description: Target value for the condition.
          type: float
        matchType:
          description: Type of the match
          oneOf:
            - $ref: '#/components/schemas/MatchType'
        op:
          description: Type of the comparison operation
          oneOf:
            - $ref: '#/components/schemas/CompareOpType'
        compositeQuery:
          description: Composite query for the condition
          allOf:
            - $ref: '#/components/schemas/CompositeQuery'
        targetUnit:
          description: Unit of the target
          type: string
        selectedQueryName:
          description: Name of the selected query
          type: string
    Alert:
      type: object
      required:
        - alert
        - alertType
        - ruleType
        - condition
      properties:
        alert:
          description: Name of the alert
          type: string
        alertType:
          description: Type of the alert
          oneOf:
            - $ref: '#/components/schemas/AlertType'
        description:
          description: Description of the alert
          type: string
        ruleType:
          description: Type of the rule
          oneOf:
            - $ref: '#/components/schemas/RuleType'
        evalWindow:
          description: Evaluation time window (ex - (now-15m, now)) for the alert in parseable format ("15m", "30m" "1h" etc.). Default is 5m.
          type: string
        frequency:
          description: Run frequency of the alert in parseable format ("15m", "30m" "1h" etc.). Default is 1m.
          type: string
        condition:
          description: Condition criteria for the alert.
          allOf:
            - $ref: '#/components/schemas/Condition'
        labels:
          description: Labels kv map for the alert
          type: object
          properties:
            key:
              type: string
              description: Key for the label
        annotations:
          description: Annotations kv map for the alert
          type: object
          properties:
            key:
              type: string
              description: Key for the annotation
        disabled:
          description: Whether the alert is disabled or not
          type: boolean
        source:
          description: Source of the alert where it is created from.
          type: string
        preferredChannels:
          description: Preferred channels for the alert. If not specified, all the channels will be used. Use the alert channel for this.
          type: array
          items:
            type: string
      xml:
        name: Alert

    QueryRangeParams:
      type: object
      required:
        - start
        - end
        - step
        - compositeQuery
      properties:
        start:
          type: integer
          format: int64
          description: Start time in epoch milliseconds
        end:
          type: integer
          format: int64
          description: End time in epoch milliseconds
        step:
          type: integer
          format: int64
          description: Step interval in seconds
        compositeQuery:
          $ref: '#/components/schemas/CompositeQuery'
        variables:
          type: object
          description: Variables for the query
          additionalProperties: true
        noCache:
          type: boolean
          description: Whether to bypass cache for this query
          default: false
        formatForWeb:
          type: boolean
          description: Whether to format the results for web display
          default: true

    CompositeQuery:
      type: object
      required:
        - queryType
        - panelType
      properties:
        builderQueries:
          type: object
          description: Builder queries for the composite query
          additionalProperties:
            $ref: '#/components/schemas/BuilderQuery'
        chQueries:
          type: object
          description: Clickhouse SQL queries for the composite query
          additionalProperties:
            $ref: '#/components/schemas/ClickHouseQuery'
        promQueries:
          type: object
          description: PromQL queries for the composite query
          additionalProperties:
            $ref: '#/components/schemas/PromQuery'
        panelType:
          type: string
          description: Panel type for the composite query
          enum:
            - 'graph'
            - 'table'
            - 'value'
            - 'list'
            - 'trace'
        queryType:
          type: string
          description: Query type for the composite query
          enum:
            - 'builder'
            - 'clickhouse_sql'
            - 'promql'
        unit:
          type: string
          description: Unit for the time series data shown in the graph
        fillGaps:
          type: boolean
          description: Whether to fill gaps in the time series data
          default: false

    PromQuery:
      type: object
      required:
        - query
        - disabled
        - name
      properties:
        query:
          type: string
          description: PromQL query expression
        stats:
          type: string
          description: Stats for the query
        disabled:
          type: boolean
          description: Whether the PromQL query is disabled
        legend:
          type: string
          description: Legend for the query
        name:
          type: string
          description: Name for the query (alphabet letter used in the UI, e.g. A, B, C, etc.)

    ClickHouseQuery:
      type: object
      required:
        - query
        - disabled
        - name
      properties:
        query:
          type: string
          description: ClickHouse SQL query
        disabled:
          type: boolean
          description: Whether the ClickHouse SQL query is disabled
        legend:
          type: string
          description: Legend for the query
        name:
          type: string
          description: Name for the query (alphabet letter used in the UI, e.g. A, B, C, etc.)

    BuilderQuery:
      type: object
      required:
        - queryName
        - stepInterval
        - dataSource
        - expression
      properties:
        queryName:
          type: string
          description: Name of the query
        stepInterval:
          type: integer
          format: int64
          description: Step interval for the query in seconds
        dataSource:
          type: string
          description: Data source for the query
          enum:
            - 'metrics'
            - 'traces'
            - 'logs'
        aggregateOperator:
          type: string
          description: Aggregate operator for the query
          enum:
            - 'noop'
            - 'count'
            - 'count_distinct'
            - 'sum'
            - 'avg'
            - 'min'
            - 'max'
            - 'p05'
            - 'p10'
            - 'p20'
            - 'p25'
            - 'p50'
            - 'p75'
            - 'p90'
            - 'p95'
            - 'p99'
            - 'rate'
            - 'sum_rate'
            - 'avg_rate'
            - 'min_rate'
            - 'max_rate'
            - 'rate_sum'
            - 'rate_avg'
            - 'rate_min'
            - 'rate_max'
            - 'hist_quantile_50'
            - 'hist_quantile_75'
            - 'hist_quantile_90'
            - 'hist_quantile_95'
            - 'hist_quantile_99'
        aggregateAttribute:
          $ref: '#/components/schemas/AttributeKey'
        temporality:
          type: string
          description: Temporality for metrics data
          enum:
            - 'Unspecified'
            - 'Delta'
            - 'Cumulative'
        filters:
          $ref: '#/components/schemas/FilterSet'
        groupBy:
          type: array
          description: Group by attributes for the query
          items:
            $ref: '#/components/schemas/AttributeKey'
        expression:
          type: string
          description: Expression for the query
        disabled:
          type: boolean
          description: Whether the query is disabled
        having:
          type: array
          description: Having clauses for the query
          items:
            $ref: '#/components/schemas/Having'
        legend:
          type: string
          description: Legend for the query
        limit:
          type: integer
          format: uint64
          description: Limit for the query
        offset:
          type: integer
          format: uint64
          description: Offset for the query
        pageSize:
          type: integer
          format: uint64
          description: Page size for the query
        orderBy:
          type: array
          description: Order by for the query
          items:
            $ref: '#/components/schemas/OrderBy'
        reduceTo:
          type: string
          description: Reduce to operator for the query
          enum:
            - 'last'
            - 'sum'
            - 'avg'
            - 'min'
            - 'max'
        selectColumns:
          type: array
          description: Select columns for the query
          items:
            $ref: '#/components/schemas/AttributeKey'
        timeAggregation:
          type: string
          description: Time aggregation for metrics queries
          enum:
            - 'latest'
            - 'sum'
            - 'avg'
            - 'min'
            - 'max'
            - 'count'
            - 'count_distinct'
            - 'rate'
            - 'increase'
        spaceAggregation:
          type: string
          description: Space aggregation for metrics queries
          enum:
            - 'sum'
            - 'avg'
            - 'min'
            - 'max'
            - 'count'
            - 'p50'
            - 'p75'
            - 'p90'
            - 'p95'
            - 'p99'
        seriesAggregation:
          type: string
          description: Series aggregation for metrics queries with group by
          enum:
            - 'sum'
            - 'avg'
            - 'min'
            - 'max'
        functions:
          type: array
          description: Functions to apply to the query result
          items:
            $ref: '#/components/schemas/Function'

    AttributeKey:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          description: Key for the attribute
        dataType:
          type: string
          description: Data type of the attribute
          enum:
            - 'string'
            - 'int64'
            - 'float64'
            - 'bool'
            - 'array(string)'
            - 'array(int64)'
            - 'array(float64)'
            - 'array(bool)'
        type:
          type: string
          description: Type of the attribute
          enum:
            - ''
            - 'tag'
            - 'resource'
            - 'scope'
            - 'spanSearchScope'
        isColumn:
          type: boolean
          description: Whether the attribute is a materialized column
        isJSON:
          type: boolean
          description: Whether the attribute is JSON
          
    FilterSet:
      type: object
      properties:
        op:
          type: string
          description: Operator for combining filter items
          enum:
            - 'AND'
            - 'OR'
        items:
          type: array
          description: Filter items
          items:
            $ref: '#/components/schemas/FilterItem'
          
    FilterItem:
      type: object
      required:
        - key
        - op
      properties:
        key:
          $ref: '#/components/schemas/AttributeKey'
        value:
          description: Value to filter by. Type depends on the attribute's dataType.
        op:
          type: string
          description: Filter operator
          enum:
            - '='
            - '!='
            - '>'
            - '>='
            - '<'
            - '<='
            - 'in'
            - 'nin'
            - 'like'
            - 'nlike'
            - 'contains'
            - 'ncontains'
            - 'regex'
            - 'nregex'
            - 'exists'
            - 'nexists'
            - 'has'
            - 'nhas'
            
    Having:
      type: object
      required:
        - columnName
        - op
        - value
      properties:
        columnName:
          type: string
          description: Column name for the having clause
        op:
          type: string
          description: Operator for the having clause
          enum:
            - '='
            - '!='
            - '>'
            - '>='
            - '<'
            - '<='
            - 'IN'
            - 'NOT_IN'
        value:
          description: Value for the having clause. Type depends on the column.
          
    OrderBy:
      type: object
      required:
        - columnName
        - order
      properties:
        columnName:
          type: string
          description: Column name for the order by
        order:
          type: string
          description: Order direction
          enum:
            - 'asc'
            - 'desc'
        key:
          type: string
          description: Key for the order by
        dataType:
          type: string
          description: Data type for the order by
        type:
          type: string
          description: Type for the order by
        isColumn:
          type: boolean
          description: Whether the order by is a column
          
    Function:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Function name
          enum:
            - 'cutOffMin'
            - 'cutOffMax'
            - 'clampMin'
            - 'clampMax'
            - 'absolute'
            - 'runningDiff'
            - 'log2'
            - 'log10'
            - 'cumSum'
            - 'ewma3'
            - 'ewma5'
            - 'ewma7'
            - 'median3'
            - 'median5'
            - 'median7'
            - 'timeShift'
            - 'anomaly'
        args:
          type: array
          description: Function arguments
          items:
            type: object
        namedArgs:
          type: object
          description: Named arguments for the function
          additionalProperties: true
          
    QueryRangeResponse:
      type: object
      properties:
        contextTimeout:
          type: boolean
          description: Whether the context timed out
        contextTimeoutMessage:
          type: string
          description: Message for context timeout
        resultType:
          type: string
          description: Type of the result
        result:
          type: array
          description: Query results
          items:
            $ref: '#/components/schemas/Result'
            
    Result:
      type: object
      properties:
        queryName:
          type: string
          description: Name of the query
        series:
          type: array
          description: Time series data
          items:
            $ref: '#/components/schemas/Series'
        predictedSeries:
          type: array
          description: Predicted series data (for anomaly detection)
          items:
            $ref: '#/components/schemas/Series'
        upperBoundSeries:
          type: array
          description: Upper bound series data (for anomaly detection)
          items:
            $ref: '#/components/schemas/Series'
        lowerBoundSeries:
          type: array
          description: Lower bound series data (for anomaly detection)
          items:
            $ref: '#/components/schemas/Series'
        anomalyScores:
          type: array
          description: Anomaly scores data (for anomaly detection)
          items:
            $ref: '#/components/schemas/Series'
        list:
          type: array
          description: List data
          items:
            $ref: '#/components/schemas/Row'
        table:
          $ref: '#/components/schemas/Table'
    
    Series:
      type: object
      properties:
        labels:
          type: object
          description: Labels for the series
          additionalProperties:
            type: string
        labelsArray:
          type: array
          description: Array of labels for the series
          items:
            type: object
            additionalProperties:
              type: string
        values:
          type: array
          description: Data points for the series
          items:
            $ref: '#/components/schemas/Point'
            
    Point:
      type: object
      required:
        - timestamp
        - value
      properties:
        timestamp:
          type: integer
          format: int64
          description: Timestamp for the data point
        value:
          type: string
          description: Value for the data point (formatted as string)
            
    Row:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp for the row
        data:
          type: object
          description: Data for the row
          additionalProperties: true
            
    Table:
      type: object
      properties:
        columns:
          type: array
          description: Columns for the table
          items:
            $ref: '#/components/schemas/TableColumn'
        rows:
          type: array
          description: Rows for the table
          items:
            $ref: '#/components/schemas/TableRow'
            
    TableColumn:
      type: object
      properties:
        name:
          type: string
          description: Name of the column
        queryName:
          type: string
          description: Name of the query that this column belongs to
        isValueColumn:
          type: boolean
          description: Whether this column is a value column
            
    TableRow:
      type: object
      properties:
        data:
          type: object
          description: Data for the row
          additionalProperties: true

  requestBodies:
    Alert:
      content:
        application/json:
          schema:
            allOf:
              - description: Alert object that needs to be added to the system
                title: Alert
              - $ref: '#/components/schemas/Alert'
      description: Alert object that needs to be added to the system
      required: true
    Dashboard:
      content:
        application/json:
          schema:
            allOf:
              - description: Dashboard object that needs to be added to the system
                title: Dashboard
              - $ref: '#/components/schemas/Dashboard'
      description: Dashboard object that needs to be added to the system
      required: true
  securitySchemes:
    api_key:
      description: >
        For this API docs, you can use the api key `SIGNOZ-API-KEY` to access data.
      type: apiKey
      name: SIGNOZ-API-KEY
      in: header
  examples:
    Order:
      value:
        quantity: 1
        shipDate: '2018-10-19T16:46:45Z'
        status: placed
        complete: false
    # Logs examples
    LogsCountExample:
      summary: Count logs by severity level over time
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "logs"
              aggregateOperator: "count"
              expression: "A"
              filters:
                op: "AND"
                items: []
              groupBy:
                - key: "severity_text"
                  dataType: "string"
                  type: "tag"
                  isColumn: true
              reduceTo: "sum"
              orderBy:
                - columnName: "timestamp"
                  order: "desc"
              limit: 100

    ErrorLogsExample:
      summary: Search error logs with specific filters
      value:
        start: 1711065600000
        end: 1711151999000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "list"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "logs"
              aggregateOperator: "noop"
              expression: "A"
              filters:
                op: "AND"
                items:
                  - key:
                      key: "severity_text"
                      dataType: "string"
                      type: "tag"
                      isColumn: true
                    value: "ERROR"
                    op: "="
                  - key:
                      key: "body"
                      dataType: "string"
                      type: ""
                      isColumn: true
                    value: "exception"
                    op: "contains"
              orderBy:
                - columnName: "timestamp"
                  order: "desc"
              limit: 50
              offset: 0
              pageSize: 50

    JsonFieldFilteringExample:
      summary: Query logs with nested JSON field filtering
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "list"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "logs"
              aggregateOperator: "noop"
              expression: "A"
              filters:
                op: "AND"
                items:
                  - key:
                      key: "body.user.id"
                      dataType: "string"
                      isJSON: true
                    value: "123456"
                    op: "="
                  - key:
                      key: "body.status"
                      dataType: "int64"
                      isJSON: true
                    value: 400
                    op: ">="
              orderBy:
                - columnName: "timestamp"
                  order: "desc"
              limit: 100

    # Traces examples
    ServiceDurationExample:
      summary: Analyze average duration by service name over time
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "traces"
              aggregateOperator: "avg"
              aggregateAttribute:
                key: "duration"
                dataType: "int64"
                type: "tag"
                isColumn: true
              expression: "A"
              filters:
                op: "AND"
                items: []
              groupBy:
                - key: "serviceName"
                  dataType: "string"
                  type: "resource"
                  isColumn: true
              orderBy:
                - columnName: "value"
                  order: "desc"
              limit: 50

    ErrorTracesExample:
      summary: Find traces with error status over time
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "traces"
              aggregateOperator: "count"
              expression: "A"
              filters:
                op: "AND"
                items:
                  - key:
                      key: "statusCode"
                      dataType: "string"
                      type: "tag"
                      isColumn: true
                    value: "ERROR"
                    op: "="
              groupBy:
                - key: "serviceName"
                  dataType: "string"
                  type: "resource"
                  isColumn: true
              orderBy:
                - columnName: "value"
                  order: "desc"
              limit: 50

    TraceExplorerExample:
      summary: List specific traces with filters and column selection
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "trace"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "traces"
              aggregateOperator: "noop"
              expression: "A"
              filters:
                op: "AND"
                items:
                  - key:
                      key: "duration"
                      dataType: "int64"
                      type: "tag"
                      isColumn: true
                    value: 100000000
                    op: ">"
                  - key:
                      key: "httpMethod"
                      dataType: "string"
                      type: "tag"
                      isColumn: true
                    value: "POST"
                    op: "="
              orderBy:
                - columnName: "timestamp"
                  order: "desc"
              limit: 20

    # Metrics examples
    CpuUsageExample:
      summary: CPU usage percentage over time (gauge metric with delta temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "system.cpu.utilization"
                type: "tag"
              temporality: "Delta"
              timeAggregation: "latest"
              spaceAggregation: "avg"
              expression: "A"
              groupBy:
                - key: "host"
                  dataType: "string"
                  type: "tag"
              filters:
                items:
                  - key:
                      key: "state"
                      dataType: "string"
                      type: "tag"
                    value: "user"
                    op: "="
                op: "AND"
              limit: 100

    HttpDurationExample:
      summary: HTTP request duration p95 from histogram (delta temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "http.server.duration"
                type: "tag"
              temporality: "Delta"
              timeAggregation: "latest"
              spaceAggregation: "p95"
              expression: "A"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
                - key: "http.method"
                  dataType: "string"
                  type: "tag"
              filters:
                items: []
                op: "AND"
              limit: 50
          unit: "ms"

    MemoryUsedExample:
      summary: Memory usage over time (gauge metric with unspecified temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "process.runtime.jvm.memory.usage"
                type: "tag"
              temporality: "Unspecified"
              timeAggregation: "avg"
              spaceAggregation: "sum"
              expression: "A"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
                - key: "type"
                  dataType: "string"
                  type: "tag"
              filters:
                items: []
                op: "AND"
              limit: 50
          unit: "bytes"

    RequestCountExample:
      summary: HTTP request count as rate (sum metric with cumulative temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "http.server.request.count"
                type: "tag"
              temporality: "Cumulative"
              timeAggregation: "rate"
              spaceAggregation: "sum"
              expression: "A"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
                - key: "http.status_code"
                  dataType: "string"
                  type: "tag"
              filters:
                items: []
                op: "AND"
              limit: 50

    ErrorRateExample:
      summary: HTTP error rate calculation (sum metric with cumulative temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "http.server.request.count"
                type: "tag"
              temporality: "Cumulative"
              timeAggregation: "rate"
              spaceAggregation: "sum"
              expression: "A"
              filters:
                items:
                  - key:
                      key: "http.status_code"
                      dataType: "string"
                      type: "tag"
                    value: ["500", "501", "502", "503", "504", "505"]
                    op: "in"
                op: "AND"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
              limit: 50

    GcDurationExample:
      summary: Garbage collection duration p90 (histogram metric with delta temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "process.runtime.jvm.gc.duration"
                type: "tag"
              temporality: "Delta"
              timeAggregation: "latest"
              spaceAggregation: "p90"
              expression: "A"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
                - key: "gc.name"
                  dataType: "string"
                  type: "tag"
              filters:
                items: []
                op: "AND"
              limit: 50
          unit: "ms"

    DiskIoExample:
      summary: Disk I/O operations with increase aggregation (sum metric with delta temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "system.disk.operations"
                type: "tag"
              temporality: "Delta"
              timeAggregation: "increase"
              spaceAggregation: "sum"
              expression: "A"
              groupBy:
                - key: "host"
                  dataType: "string"
                  type: "tag"
                - key: "direction"
                  dataType: "string"
                  type: "tag"
              filters:
                items: []
                op: "AND"
              limit: 50

    NetworkTrafficExample:
      summary: Network traffic rate by service (sum metric with cumulative temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "system.network.io.transmitted"
                type: "tag"
              temporality: "Cumulative"
              timeAggregation: "rate"
              spaceAggregation: "sum"
              expression: "A"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
              filters:
                items: []
                op: "AND"
              limit: 50
          unit: "bytes/second"

    DbConnectionsExample:
      summary: Database connections over time (gauge metric with unspecified temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "db.client.connections.usage"
                type: "tag"
              temporality: "Unspecified"
              timeAggregation: "latest"
              spaceAggregation: "max"
              expression: "A"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
                - key: "state"
                  dataType: "string"
                  type: "tag"
              filters:
                items: []
                op: "AND"
              limit: 50

    AnomalyDetectionExample:
      summary: HTTP request duration with anomaly detection (histogram metric with delta temporality)
      value:
        start: 1711065600000
        end: 1711069200000
        step: 60
        compositeQuery:
          queryType: "builder"
          panelType: "graph"
          builderQueries:
            A:
              queryName: "A"
              stepInterval: 60
              dataSource: "metrics"
              aggregateAttribute:
                key: "http.server.duration"
                type: "tag"
              temporality: "Delta"
              timeAggregation: "latest"
              spaceAggregation: "p95"
              expression: "A"
              groupBy:
                - key: "service.name"
                  dataType: "string"
                  type: "resource"
              filters:
                items: []
                op: "AND"
              functions:
                - name: "anomaly"
                  args: []
              limit: 50
          unit: "ms"
